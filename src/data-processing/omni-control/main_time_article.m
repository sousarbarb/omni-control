close all
clear all
clc


%% INITIALIZATION
folder = "../../../data/omni-control/time/";
filenames = [
  "omnictrl_time_3_1.csv"  , ...
  "omnictrl_time_3_2.csv"  , ...
  "omnictrl_time_3_3.csv"  , ...
  "omnictrl_time_4_1.csv"  , ...
  "omnictrl_time_4_2.csv"  , ...
  "omnictrl_time_4_3.csv"  , ...
  "omnictrl_time_5_1.csv"  , ...
  "omnictrl_time_5_2.csv"  , ...
  "omnictrl_time_5_3.csv"  , ...
  "omnictrl_time_6_1.csv"  , ...
  "omnictrl_time_6_2.csv"  , ...
  "omnictrl_time_6_3.csv"  , ...
  "omnictrl_time_7_1.csv"  , ...
  "omnictrl_time_7_2.csv"  , ...
  "omnictrl_time_7_3.csv"  , ...
  "omnictrl_time_8_1.csv"  , ...
  "omnictrl_time_8_2.csv"  , ...
  "omnictrl_time_8_3.csv"  , ...
  "omnictrl_time_9_1.csv"  , ...
  "omnictrl_time_9_2.csv"  , ...
  "omnictrl_time_9_3.csv"  , ...
  "omnictrl_time_10_1.csv" , ...
  "omnictrl_time_10_2.csv" , ...
  "omnictrl_time_10_3.csv" , ...
  "omnictrl_time_11_1.csv" , ...
  "omnictrl_time_11_2.csv" , ...
  "omnictrl_time_11_3.csv" , ...
  "omnictrl_time_12_1.csv" , ...
  "omnictrl_time_12_2.csv" , ...
  "omnictrl_time_12_3.csv" , ...
  "omnictrl_time_13_1.csv" , ...
  "omnictrl_time_13_2.csv" , ...
  "omnictrl_time_13_3.csv" , ...
  "omnictrl_time_14_1.csv" , ...
  "omnictrl_time_14_2.csv" , ...
  "omnictrl_time_14_3.csv" , ...
  "omnictrl_time_15_1.csv" , ...
  "omnictrl_time_15_2.csv" , ...
  "omnictrl_time_15_3.csv" , ...
  "omnictrl_time_16_1.csv" , ...
  "omnictrl_time_16_2.csv" , ...
  "omnictrl_time_16_3.csv" , ...
  "omnictrl_time_17_1.csv" , ...
  "omnictrl_time_17_2.csv" , ...
  "omnictrl_time_17_3.csv" , ...
  "omnictrl_time_18_1.csv" , ...
  "omnictrl_time_18_2.csv" , ...
  "omnictrl_time_18_3.csv" , ...
  "omnictrl_time_19_1.csv" , ...
  "omnictrl_time_19_2.csv" , ...
  "omnictrl_time_19_3.csv" , ...
  "omnictrl_time_20_1.csv" , ...
  "omnictrl_time_20_2.csv" , ...
  "omnictrl_time_20_3.csv" , ...
  "omnictrl_time_21_1.csv" , ...
  "omnictrl_time_21_2.csv" , ...
  "omnictrl_time_21_3.csv" , ...
  "omnictrl_time_22_1.csv" , ...
  "omnictrl_time_22_2.csv" , ...
  "omnictrl_time_22_3.csv" , ...
  "omnictrl_time_23_1.csv" , ...
  "omnictrl_time_23_2.csv" , ...
  "omnictrl_time_23_3.csv" , ...
  "omnictrl_time_24_1.csv" , ...
  "omnictrl_time_24_2.csv" , ...
  "omnictrl_time_24_3.csv" , ...
];
num_files = length(filenames);


%% READ DATA

% Options for importing the CSV files
readdata_opts = detectImportOptions( folder + filenames(1) );

% Data cell
Data = cell(num_files,2);

for i=1:num_files
  % Future size
  readdata_opts.DataLines = 2;
  Metadata = readmatrix( folder + filenames(i) , readdata_opts);
  
  % Time data
  readdata_opts.DataLines = 5;
  Data{i,1} = Metadata(1,1);
  Data{i,2} = readmatrix( folder + filenames(i) , readdata_opts);
end


%% PROCESS DATA

% Find unique values of future size
FutureSize = unique(cell2mat(Data(:,1)));
num_future = length(FutureSize);

% Data variables cells
StandByTimeData = [];
FutureTimeData  = cell(1,num_future);
for i=1:num_future
  FutureTimeData{i} = [];
end

% Process time data
for i=1:num_files
  % Find future index for saving in TimeData
  index = find(FutureSize == Data{i,1});
  
  % Add data
  % - stand-by data
  StandByTimeData =                            ...
    [ StandByTimeData                        ; ...
      Data{i,2}( (Data{i,2}(:,1) == 0) , 2 )   ];
  % - processing time of the controller for a certain future value
  FutureTimeData{index} =                      ...
    [ FutureTimeData{index}                  ; ...
      Data{i,2}( (Data{i,2}(:,1) == 1) , 2 )   ];
end


%% OUTPUT ERROR MEASUREMENTS

% Filename output (change filename for saving data analysis)
filename_out = "data-analysis_raw.csv";
Data_out = cell(num_future+2,7);
Data_out(1,:) = { "", "#samples" , "Mean (ms)", "Std (ms)", "Median (ms)", "Min (ms)", "Max (ms)" };
Data_out(2,:) = {
  "Stand-by" , ...
  length(StandByTimeData) , ...
  mean(StandByTimeData)   , ...
  std(StandByTimeData)    , ...
  median(StandByTimeData) , ...
  min(StandByTimeData)    , ...
  max(StandByTimeData)
};

for i=1:num_future
  Data_out(i+2,:) = {
    sprintf("M = %d", FutureSize(i) ) , ...
    length(FutureTimeData{i}) , ...
    mean(FutureTimeData{i})   , ...
    std(FutureTimeData{i})    , ...
    median(FutureTimeData{i}) , ...
    min(FutureTimeData{i})    , ...
    max(FutureTimeData{i})
  };
end

% Write file
writecell( Data_out , folder + filename_out );


%% VISUALIZE DATA

% Convert cell to compatible boxplot data
FutureTimeDataViz = [];
FutureTimeDataVizLabel = [];

FutureTimeDataViz = [ FutureTimeDataViz ; StandByTimeData ];
FutureTimeDataVizLabel =     ...
  [ FutureTimeDataVizLabel ; ...
    repmat( "Stand-by" , length(StandByTimeData) , 1 ) ];

for i=1:num_future
  FutureTimeDataViz = [ FutureTimeDataViz ; FutureTimeData{i} ];
  FutureTimeDataVizLabel =     ...
    [ FutureTimeDataVizLabel ; ...
      repmat( sprintf("%d", FutureSize(i) ) , length(FutureTimeData{i}) , 1 ) ];
end

% Box plot

figure
hold on
boxplot(FutureTimeDataViz,FutureTimeDataVizLabel)
grid on
ylim([ 0 , max(FutureTimeDataViz) * 1.1 ])
xlabel('M \rightarrow')
ylabel('Processing time usage (ms) \rightarrow')
title('Analysis of the processing time usage depending on M')
saveas(gcf,'time-usage','epsc')
saveas(gcf,'time-usage','fig')

